WRITE A CODE TO CREATE A FUNCTION FOR TRANSLATING DNA TO PROTEIN. 

codon_db <- c("UUU"="Phe", "UUC"= "Phe", "UUA"= "Leu", "UUG"= "Leu")
test_cd <- c("UUUUUAUUAUUCUUAUUUUUCUUGUUGUUA")
translator <- function(test_cd){
  
  split_seq <- strsplit(test_cd, "")[[1]]
  #print(split_seq)
  
  codon_position <- seq( 1, length(split_seq), 3)
  #print(codon_position)
  ribosomal_output <- c()
  for (i in codon_position){
    curr_codon <- split_seq[i:(i+2)]
    curr_codon <- paste0(curr_codon[1],curr_codon[2],curr_codon[3])
    
       print(curr_codon)       
    ribosomal_output <- c(ribosomal_output, codon_db[curr_codon])
            }
  return(ribosomal_output
  }
translator(test_codon )



#LOGISTIC GROWTH CURVE

population_maker <- function (k=2, x_mid =5, x){
  solution <- 1/ (1+ exp(-k *(x - x_mid)))
  return(solution)
}
print(population_maker( , , x=2))

od_600 <- c()
habibi <-c(0:24)
for (i in habibi){
  curr_od <- population_maker(k= 0.25, x_mid= 10, x=i)
  od_600 <- c(od_600, curr_od)
}
print(od_600)
print(length(habibi))
plot(x=habibi, y= od_600)



# WRITE A FUNCTION TO DETERMINE THE TIME TO REACH 80% GROWTH RATE USING CARRING CAPACITY.

time <- function (k= 4, p_i = 50, p_f = 1* 10^9, r = x){
  solution1 <- (k * log(p_f/p_i))/ log(1 +r)
return(solution1)}
time(r= 0.08)


# calculate the hamming distance of slack username and twitter handle 
    
slack_username <- "lawalhabeebakor" 
twitterhandle <-"alchemistakored"
nchar(slack_username)
nchar(twitterhandle)

hamming_distance <- function(slack_username, twitterhandle){
  distance <- 0 
  for (i in 1:nchar(twitterhandle)){
    if (substr(slack_username, i,i)!= substr(twitterhandle, i, i)){
      distance <- distance + 1
    }
    
  }
  return(distance)
}
hamming_distance(slack_username, twitterhandle )
  
